name: security-pipeline

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-and-syft:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Docker image
        run: |
          docker build -t juice-shop:${{ github.sha }} .

      - name: Syft SBOM Scan
        uses: anchore/sbom-action@v0
        with:
          image: "juice-shop:${{ github.sha }}"
          output-file: "sbom.spdx.json" # Bu dosyayı da artifact olarak yüklemeyi düşünebilirsiniz
          format: "spdx-json"
      # SBOM artifact yükleme (isteğe bağlı)
      # - name: Upload SBOM Artifact
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: sbom-spdx
      #     path: sbom.spdx.json

  # 2) SAST (Semgrep) Job
  Sast-scan:
    name: SAST (Semgrep)
    needs: build-and-syft
    runs-on: ubuntu-latest # ubuntu-22.04 veya daha güncel olabilir
    # Container yerine host runner kullanmak artifact yönetimini kolaylaştırabilir
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python for Semgrep
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Run Semgrep Scan
        run: |
          pip install semgrep
          semgrep ci --config=auto --sarif --output=semgrep.sarif || true

      # GitHub Code Scanning'e yükleme (iyi pratik)
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        # If: semgrep scan step fails, this step will be skipped
        # If you want to upload even if the scan fails (e.g., syntax error), add if: always()
        # if: always()
        with:
          sarif_file: 'semgrep.sarif'

      # Workflow Artifact olarak yükleme (DefectDojo için)
      - name: Upload Semgrep Artifact
        uses: actions/upload-artifact@v3
        if: always() # Tarama hata verse bile artifact yüklensin
        with:
          name: semgrep-sarif # İndirme adımında kullanılacak artifact adı
          path: semgrep.sarif  # Yüklenecek dosya

  # 3) Gitleaks-scan Job
  Gitleaks-scan:
    name: Gitleaks
    needs: Sast-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Gitleaks'in tüm geçmişi taraması için

      - name: Run Gitleaks Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          # GITLEAKS_ENABLE_UPLOAD_ARTIFACT: false # Açıkça kendimiz yüklüyoruz
          GITLEAKS_ENABLE_SUMMARY: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Raporlama için gerekli olabilir
          # Gitleaks'in SARIF çıktısı vermesini sağlayın (genelde varsayılan veya config ile)
          # Örn: GITLEAKS_CONFIG_PATH: .gitleaks.toml (varsa)
          # Çıktı dosyasının adını belirtmek gerekebilir: GITLEAKS_REPORT_PATH: gitleaks_report.sarif
          # Varsayılan olarak results.sarif oluşturduğunu varsayıyoruz
        continue-on-error: true # Bulgu varsa bile pipeline devam etsin

      # GitHub Code Scanning'e yükleme (iyi pratik)
      - name: Upload SARIF to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          # gitleaks action v2 genelde results.sarif oluşturur
          sarif_file: 'results.sarif'

      # Workflow Artifact olarak yükleme (DefectDojo için)
      - name: Upload Gitleaks Artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: gitleaks-sarif # İndirme adımında kullanılacak artifact adı
          path: results.sarif  # Yüklenecek dosya (Gitleaks'in oluşturduğu varsayılan dosya)

  # 5) Deploy Job (Dummy)
  deploy:
    name: Deploy
    needs: Gitleaks-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Dummy Deploy Step
        run: echo "Deploying app... (This is a dummy step for https://example.com/)"
        # Gerçek senaryoda build adımından image'ı almak gerekebilir

  # 6) ZAP Scan Job
  zap_scan:
    name: ZAP Full Scan
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # ZAP yapılandırması repo'daysa gerekli
        uses: actions/checkout@v4

      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.14.0 # Daha güncel ZAP action'larını kontrol edin
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://example.com/' # GERÇEK DEPLOYMENT ADRESİYLE DEĞİŞTİRİN
          rules_file_name: '.zap/rules.tsv' # Bu dosyanın var olduğundan emin olun veya kaldırın
          cmd_options: '-a' # Ajax Spider'ı çalıştır
          # DefectDojo için rapor oluşturma seçenekleri:
          report_xml: 'zap_report.xml' # DefectDojo genellikle XML veya JSON destekler
          # report_html: 'zap_report.html'
          # report_md: 'zap_report.md'

      # ZAP Raporunu Workflow Artifact olarak yükleme
      - name: Upload ZAP Scan Report Artifact (XML)
        uses: actions/upload-artifact@v3
        if: always() # ZAP hata bulsa bile rapor yüklensin
        with:
          name: zap-report-xml # İndirme adımında kullanılacak artifact adı
          path: zap_report.xml # ZAP action'ının oluşturduğu dosya

  # Import results to DefectDojo
  import-defectdojo:
    name: Import Scans to DefectDojo
    needs: zap_scan # ZAP taraması bittikten sonra çalışsın
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code # import_scan.py betiği için gerekli
        uses: actions/checkout@v3

      - name: Setup Python # Python betiği için gerekli
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies # import_scan.py'nin bağımlılıkları varsa
        run: |
          pip install requests # Örnek: requests kütüphanesi
          # Eğer requirements.txt varsa: pip install -r requirements.txt

      - name: Download Semgrep Artifact
        uses: actions/download-artifact@v3
        with:
          name: semgrep-sarif
          # path: . # Varsayılan olarak workspace kök dizinine indirir

      - name: Download Gitleaks Artifact
        uses: actions/download-artifact@v3
        with:
          name: gitleaks-sarif
          # path: .

      - name: Download ZAP Artifact
        uses: actions/download-artifact@v3
        with:
          name: zap-report-xml # Yüklenen artifact adı ile eşleşmeli
          # path: .

      - name: Import Semgrep SARIF to DefectDojo
        env:
          DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
          # DEFECTDOJO_URL, PRODUCT_NAME, ENGAGEMENT_NAME gibi diğer gerekli değişkenler
        # İndirilen dosyanın adı semgrep.sarif olacaktır
        run: python import_scan.py --scan-type "Semgrep Scan" --file semgrep.sarif # Kendi betiğinize göre düzenleyin

      - name: Import GitLeaks SARIF to DefectDojo
        env:
          DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
          # Diğer gerekli env değişkenleri
        # İndirilen dosyanın adı results.sarif olacaktır
        run: python import_scan.py --scan-type "Gitleaks Scan" --file results.sarif # Kendi betiğinize göre düzenleyin

      - name: Import ZAP XML to DefectDojo
        env:
          DEFECTDOJO_API_TOKEN: ${{ secrets.DEFECTDOJO_API_TOKEN }}
          # Diğer gerekli env değişkenleri
        # İndirilen dosyanın adı zap_report.xml olacaktır
        run: python import_scan.py --scan-type "ZAP Scan" --file zap_report.xml # Kendi betiğinize göre düzenleyin
